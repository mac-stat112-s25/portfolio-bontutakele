---
title: "ica-date"
format: html
---


#9.1 Warm up


##Example 1: Single Verb

```{r}
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')

# Check it out
head(penguins)
```

```{r}
#Checking understanding: plot relationship between body mass and bill length and how they vary by species and sex.
ggplot(penguins, aes(y = body_mass_g, x = bill_length_mm, col = sex)) +
  geom_point() +
  facet_wrap(~species)
```


```{r}
#Checking understanding
# Get data on only Adelie penguins that weigh more than 4700g
penguins |> 
  filter(species == "Adelie", body_mass_g >= 4700)

# Get data on penguin body mass only
# Show just the first 6 rows
penguins |>
  select(body_mass_g) |>
  head()

# Sort the penguins from smallest to largest body mass
# Show just the first 6 rows
penguins |>
  select(body_mass_g) |>
  arrange(body_mass_g) |>
  head()

# Calculate the average body mass across all penguins
# Note: na.rm = TRUE removes the NAs from the calculation
penguins |>
  summarise(ave_body = mean(body_mass_g, na.rm = TRUE))

# Calculate the average body mass by species
penguins |>
  group_by(species) |>
  summarise(ave_bod_species = mean(body_mass_g, na.rm = TRUE))

# Create a new column that records body mass in kilograms, not grams
# NOTE: there are 1000 g in 1 kg
# Show just the first 6 rows
penguins |>
  group_by(species) |>
  summarise(ave_bod_species = mean(body_mass_g, na.rm = TRUE)) |>
  mutate(ave_bod_kg = ave_bod_species/1000)
```

```{r}
#Checking understanding: # of penguins in each species
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  facet_wrap(~ species)
```

```{r}
#Checking understanding: # of penguins in each species
penguins |>
  group_by(species) |>
  summarize(n())
```


##Example 2: Multiple Verbs

```{r}
# Sort Gentoo penguins from biggest to smallest with respect to their bill length in cm (there are 10 mm in a cm) 
penguins |>
  filter(species == "Gentoo") |>
  select(species, bill_length_mm) |>
  summarize(bill_length_cm = bill_length_mm/10) |>
  arrange(desc(bill_length_cm))
```

```{r}
# Sort the species from smallest to biggest with respect to their average bill length in cm
penguins |>
  group_by(species) |>
  summarize(ave_bill_cm = mean(bill_length_mm/10, na.rm = TRUE)) |>
  arrange(ave_bill_cm)
```


##Example 3: Interpret Code

```{r}
# Only chinstrap, grouping them by sex, creating minimum and maximum body mass, new column range
penguins |>
  filter(species == "Chinstrap") |>
  group_by(sex) |>
  summarize(min = min(body_mass_g), max = max(body_mass_g)) |>
  mutate(range = max-min)
```


#9.2 Exercises Part 1: Same Verbs, New Tricks


##Exercise 1: More Filtering

###Part a
```{r}
#Adelie & Chinstrap only
penguins |>
  filter(species == c("Adelie", "Chinstrap")) |>
  count(species)
```

```{r}
#Adelie & Chinstrap only, by excluding Gentoo
penguins |>
  filter(species != "Gentoo") |>
  count(species)
```

###Part b
####Example 1
```{r}
penguins |>
  summarize(sum(is.na(body_mass_g)))
```

```{r}
#New dataset to remove NA in body mass penguins
penguins_w_body_mass <- penguins |>
  filter(!is.na(body_mass_g))

nrow(penguins_w_body_mass)
nrow(penguins)
```

```{r}
penguins_w_body_mass |>
  summarize(sum(is.na(sex)))
```

####Example 2
```{r}
#To get rid of any penguins with any missing value
penguins_complete <- penguins |>
  na.omit()
nrow(penguins)
nrow(penguins_complete)
```

###Part C
na.omit() should only be used when there are a lot of units with missing data or a few with many missing values. Getting rid of units when they aren't missing as much data leaves out data from other variables that could end up skewing the analysis


##Exercise 2: More Selecting

```{r}
names(penguins)
```

```{r}
# Use a shortcut to keep everything but the year and island variables
penguins |>
  select(-island, -year)
```

```{r}
# Use a shortcut to keep only species and the penguin characteristics measured in mm
penguins |>
  select(species, ends_with("mm"))
```

```{r}
# Use a shortcut to keep only species and bill-related measurements
penguins |>
  select(species, starts_with("bill"))
```

```{r}
# Use a shortcut to keep only species and the length-related characteristics
penguins |>
  select(species, contains("length"))
```


##Exercise 3: Arranging, Counting, & Grouping by Multiple Variables

```{r}
#Code to sort by species, then island
penguins |>
  arrange(species, island)
```

```{r}
#Code to count number of male & female of each species
penguins |>
  count(species, sex)
```

```{r}
#Code to calculate average body mass by species and sex
penguins |>
  group_by(species, sex) |>
  summarize(mean = mean(body_mass_g, na.rm = TRUE))
```


##Exercise 4: Dates

```{r}
#Today's date
as.Date(today())
```

```{r}
#store
today <- as.Date(today())

#class
class(today)
```

```{r}
#lubridate
year(today)
#gives the year of the date given

month(today)
#gives the month of the date given

month(today, label = TRUE)
#gives the month's name of the date given

yday(today)
#Julian day
```

```{r}
#day of the week (sun-sat, not mon-sun)
wday(today)
wday(today, label =TRUE)
```

```{r}
#checks to see if the date is or is after the given date
today >= ymd("2024-02-14")
#checks to see if the date is before the given date
today < ymd("2024-02-14")
```


#9.3 Exercises Part 2: Application


```{r}
library(mosaic)
data("Birthdays")
head(Birthdays)
```


##Exercise 5: Warming Up

```{r}
# How many days of data do we have for each state?
Birthdays |> 
  group_by(state) |>
  count(state)

# How many total births were there in this time period?
Birthdays |> 
  summarize(sum(births))

# How many total births were there per state in this time period, sorted from low to high?
Birthdays |>
  group_by(state) |>
  summarise(births = sum(births)) |>
  arrange(births)
```


##Exercise 6: Homework Reprise

```{r}
daily_births <- Birthdays |>
  group_by(date, wday) |>
  summarise(total_births = sum(births))
```

```{r}
#births over time w/ day of week
ggplot(daily_births, aes(x = date, y = total_births, col = wday)) +
  geom_point()
```


##Exercise 7: Wrangle & Plot

###Part a
```{r}
#total number of births in each month (name, not number) & year
#month_births <- Birthdays |>
#  mutate(mon = month(date, label = TRUE))
#  unite(monyear, mon, year, sep = " ")
month_births <- Birthdays |> 
  mutate(mon = month(date, label = TRUE)) |>
  group_by(mon, year) |>
  summarize(total_birth = sum(births))

#plot births by month
ggplot(month_births, aes(y = total_birth, x = mon)) +
  geom_boxplot()
#Most births occur in August, least in February
```

###Part b
```{r}
#births per week 1988
week_birth <- Birthdays |>
  filter(year == 1988) |>
  mutate(week = week(date)) |>
  group_by(state, week) |>
  summarize(total_per_week = sum(births)) |>
  filter(week < 53)

#line plot of births by week each state
ggplot(week_birth, aes(x = week, y = total_per_week, col = state)) +
  geom_line()
#Slight increase in summer, decrease in winter, same as last plot. California with most births
```

###Part c
```{r}
#part b w/ MN & LA
mnla <- Birthdays |>
  filter(state %in% c("AK", "HI")) |>
  mutate(week_mnla = week(date)) |>
  group_by(state, week_mnla) |>
  summarize(total_per_week = sum(births)) |>
  filter(week_mnla < 53)

ggplot(mnla, aes(x = week_mnla, y = total_per_week, col= state)) +
  geom_line()
#interestingly, Minnesota has a decrease in births in the spring, while Louisiana has a small increase. Both have peaks in the fall. 
```


##Exercise 8: More Practice

###Part a
```{r}
Birthdays |>
  filter(state == "MA", year == 1979) |> 
  arrange(desc(births))
```

###Part b
```{r}
Birthdays |>
  filter(date >= ymd("1979-09-09"), date <= ymd("1979-09-12")) |>
  group_by(state) |>
  summarize(total_births = sum(births)) |>
  arrange(total_births) |>
  tail(5)
```

