---
title: "Spatial Viz"
---

Use this file for practice with the **spatial viz** in-class activity.  Refer to the class website for details.


```{r}
install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
```

```{r}
# Load tidyverse package for plotting and wrangling
library(tidyverse)

# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |> 
  mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |> 
  filter(address != "c")

# Check it out
head(energy)
```


## Example 1 - 5

```{r}
# Example 1
class(energy$month)
ggplot(energy, aes(x = month, y = therms)) + 
  geom_point()
```



Therms ranged from 3 to 473. Jan: 305-425, Feb: 62-120, Mar: 839-908, Apr: 208-443, May: 286-473, Jun: 218-385, Jul: 104-218, Aug: 102-271, Sep: 3-91, Oct: 3-21, Nov: 9-21, Dec: 12-42

Typical: 

```{r}
# Difference by address
# Both addresses average around the same energy usage, but address a has a few that are higher
ggplot(energy, aes(x = address, y = therms)) + 
  geom_boxplot()
```

```{r}
# Example 2 
# Hard to tell, they don't overlap until halfway thorugh 2007. They both have the similar trend of having high energy use in the winter and lower in the summer
ggplot(energy, aes(x = date, y = therms, col = address)) +
  geom_point()
```

```{r}
# Example 3
# Energy use went up in both addresses after renovation
ggplot(energy, aes(x = renovated, y = therms, col = address)) +
  geom_boxplot()
```


### Part 1


## Exercise 1 A leaflet with markers / points

```{r}
fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")

# Check it out
head(fave_places)
```

Part a
```{r}
# Load the leaflet package
library(leaflet)

# Just a plotting frame
leaflet(data = fave_places)
```

```{r}
# Now what do we have?
leaflet(data = fave_places) |> 
  addTiles()
```

```{r}
# Now what do we have?
# longitude and latitude refer to the variables in our data
leaflet(data = fave_places) |> 
  addTiles() |> 
  addMarkers(lng = ~longitude, lat = ~latitude)
# Since we named them "longitude" and "latitude", the function
# automatically recognizes these variables. No need to write them!
```


## Exercise 2: Details

```{r}
# Load package needed to change color
library(gplots)

# We can add colored circles instead of markers at each location
leaflet(data = fave_places) |> 
  addTiles() |> 
  addCircles(color = col2hex("red"))
```

```{r}
# We can change the background
# Mark locations with yellow dots
# And connect the dots, in their order in the dataset, with green lines
# (These green lines don't mean anything here, but would if this were somebody's travel path!)
leaflet(data = fave_places) |>
  addProviderTiles("USGS") |>
  addCircles(weight = 10, opacity = 1, color = col2hex("yellow")) |>
  addPolylines(
    lng = ~longitude,
    lat = ~latitude,
    color = col2hex("green")
  )
```


## Exercise 3

```{r}
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
```

```{r}
# Don't worry about the syntax
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")
```


### Part 2: Static Points on a map


Leaflet is power, but takes time and makes good interactive maps, not static
Point maps with ggplot


## Exercise 3: A simple scatterplot

```{r}
ggplot(starbucks, aes(x = Longitude, y = Latitude)) +
  geom_point(alpha = .2, size = .2)
```
No information about non-starbucks locations relative to the starbucks locations


## Exercise 4: Adding a country-level background

Part a
Country-level boundaries from rnaturalearth package

```{r}
# Load the package
library(rnaturalearth)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
gafrica <- ne_countries(continent = 'Africa', returnclass = 'sf')
```

Part b
```{r}
library(ggplot2)
# What does this code produce?
# What geom are we using for the point map?
# Geom simple feature format
world_boundaries <- ne_countries(state = "Alaska", returnclass = "sf")
ggplot(world_boundaries) + 
  geom_sf()
```

```{r}
# Load package needed to change map theme
library(mosaic)

# Add a point for each Starbucks
# NOTE: The Starbucks info is in our starbucks data, not world_boundaries
# How does this change how we use geom_point?!
ggplot(world_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2, color = "darkgreen"
  ) +
  theme_map()
```

Part c
It seems that there are mostly starbucks in the US, much of Europe, and south and southeast Asia.


## Exercise 5: Zooming in on some countries

Part a
Goal: To map the Starbucks locations in Canada, Mexico, and the US.
```{r}
# Step 1: Data on Starbucks for only Canada, Mexico, and the US, labeled as “CA”, “MX”, “US” in the starbucks data.
# don't worry about syntax
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))
```

```{r}
# Step 2: A background map of state- and national-level boundaries in Canada, Mexico, and the US. This requires ne_states() in the rnaturalearth package where the countries are labeled ‘canada’, ‘mexico’, ‘united states of america’.
cma_boundaries <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf")
```

Part b
Making the map
```{r}
# Just the boundaries
ggplot(cma_boundaries) + 
  geom_sf()
```

```{r}
# Add the points
# And zoom in
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50)) +
  theme_map()
```


## Exercise 6: A state- and country-level map

A higher resolution map of Starbucks locations within the states of Minnesota, Wisconsin, North Dakota, and South Dakota, with a background map at the county-level.

Part a
```{r}
# Step 1: Data on Starbucks only within the states of interest
starbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))
```

```{r}
# Step 2: A background map of state- and county-level boundaries in these states. This requires st_as_sf() in the sf package, and map() in the maps package, where the countries are labeled ‘minnesota’, ‘north dakota’, etc.
# Load packages
library(sf)
library(maps)

# Get the boundaries
midwest_boundaries <- st_as_sf(
  maps::map("county",
            region = c("minnesota", "wisconsin", "north dakota", "south dakota"), 
            fill = TRUE, plot = FALSE))

# Check it out
head(midwest_boundaries)
```

Part b
Make the plot
```{r}
ggplot(midwest_boundaries) + 
   geom_sf() + 
   geom_point(
     data = starbucks_midwest,
     aes(x = Longitude, y = Latitude),
     alpha = 0.7,
     size = 0.2, 
     color = 'darkgreen'
   ) + 
   theme_map()
```


## Exercise 7: Contour maps


```{r}
# Point map (we made this earlier)
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()
# When locations start overlapping on a map, it can be tough to visualize areas of higher density
```

```{r}
# What changed in the plot?
#The points are replaced by rings that represent an amount of starbucks, where more places where the rings are closer, the more starbucks in that area
# What changed in our code?!
#geom_point() became geom_density_2d(), and alpha was removed
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_density_2d(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()
```


### Part 3: Choropleth Maps



In these datasets, we’re interested in the overall election outcome by region (state or county), not the specific geographic location of some observation
```{r}
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

```{r}
# Don't worry about the code!
# Data Wrangling
# New variable repub_20_categories is the discrete form of repub_pct_20, grouping the points into increments of 5 percentage points (for states) or 10 percentage points (for counties)
elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))
```


## Exercise 8: State-level choropleth maps

Part a
Map the 2020 Republican support in each state, repub_pct_20.
```{r}
# Step 1: Data on elections in each state, which we already have: elections_by_state.
# Step 2: A background map of state boundaries in the US. The boundaries we used for point maps don’t work here.
# (Optional detail: they’re sf objects and we now need a data.frame object.) Instead, we can use the map_data() function from the ggplot2 package:

# Get the latitude and longitude coordinates of state boundaries
states_map <- map_data("state")

# Check it out
head(states_map)
```

```{r}
# Important detail: Note that the region variable in states_map, and the state_name variable in elections_by_state both label states by the full name in lower case letters. This is critical to the background map and our data being able to communicate.
head(states_map)
head(elections_by_state) 
```

Part b
Map repub_pct_20 by state.
```{r}
# Note where the dataset, elections_by_state, is used
# Note where the background map, states_map, is used
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
                      theme_map() 
```

```{r}
# Make it nicer!
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_gradientn(name = "% Republican", colors = c("blue", "purple", "red"), values = scales::rescale(seq(0, 100, by = 5)))
```

```{r}
# Plot the discretized version of repub_pct_20, repub_20_categories:
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map()
```

```{r}
# Load package needed for refining color palette
library(RColorBrewer)

# Now fix the colors
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
```

Part c
We can add other layers, like points, on top of a choropleth map. Add a Starbucks layer! Do you notice any relationship between Starbucks and elections? Or are we just doing things at this point? ;)
```{r}
# Get only the starbucks data from the US
starbucks_us <- starbucks |> 
  filter(Country == "US")

# Map it
ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  geom_point(
    data = starbucks_us,
    aes(x = Longitude, y = Latitude),
    size = 0.05,
    alpha = 0.2,
    inherit.aes = FALSE
  ) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  theme_map() + 
  scale_fill_manual(values = rev(brewer.pal(8, "RdBu")), name = "% Republican")
```

Details:

map_id is a required aesthetic for geom_map().

- It specifies which variable in our dataset indicates the region (here state_name).

- It connects this variable (state_name) to the region variable in our mapping background (states_map). These variables must have the same possible outcomes in order to be matched up (alabama, alaska, arizona,…).

expand_limits() assures that the map covers the entire area it’s supposed to, by pulling longitudes and latitudes from the states_map.

Part d
We used geom_sf() for point maps. What geom do we use for choropleth maps?

- geom_map()


## Exercise 9: County-level choropleth maps

Part a
Map the 2020 Republican support in each county. 
```{r}
# Step 1: Data on elections in each county, which we already have: elections_by_county.
# Step 2: Background map of county boundaries in the US, stored in the county_map dataset in the socviz package

# Get the latitude and longitude coordinates of county boundaries
library(socviz)
data(county_map) 

# Check it out
head(county_map)
```

```{r}
# Important detail: We officially have a headache. Our county_map refers to each county by a 5-number id. Our elections_by_counties data refers to each county by a county_fips code, which is mostly the same as id, BUT drops any 0’s at the beginning of the code.
head(county_map)
head(elections_by_counties)
```

```{r}
# Wrangle data so it can communicate with the background map

# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
```

Part b
Map Republican support by county. Go straight to the discretized repub_20_categories variable, and a good color scale.
```{r}
ggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +
  geom_map(map = county_map) +
  scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal()
```

