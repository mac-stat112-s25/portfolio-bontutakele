[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT112 Notebook",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.\n\nage &lt;- 23\nage\n\n[1] 23\n\nagein17 &lt;- age + 17\nagein17\n\n[1] 40\n\n\n\nseq(from=1,to=9,by=2)\n\n[1] 1 3 5 7 9\n\nseq(from = 1, to=9,by=2)\n\n[1] 1 3 5 7 9\n\nmy_output &lt;- -13\nthisisthetemperaturetodayincelsius &lt;- -13\nthis_is_the_temperature_today_in_celsius &lt;- -13\n\n# BAD: tough to read\nseq(from=1,to=9,by=2)\n\n[1] 1 3 5 7 9\n\n# GOOD: spaces between \"words\" and punctuation helps\nseq(from = 1, to = 9, by = 2)\n\n[1] 1 3 5 7 9\n\n# BAD: too smooshy and hard to read\ndegreescelsius &lt;- -13\n\n# BETTER but not the R-way of naming variables\n# Why is it called camel case?\ndegreesCelsius &lt;- -13\n\n# BETTER\ndegrees_celsius &lt;- -13\n\n#1_18_24_degrees_c &lt;- -13\n#_degrees_c &lt;- -13\n#Jan/18/24/degrees &lt;- -13\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "bw/bw-uni.html",
    "href": "bw/bw-uni.html",
    "title": "\n1  Univariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking univariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\n#|fig-cap: \"Number of Hikes in Each Rating in the High Peaks Dataset\"\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Difficult Rating of Hikes\", y = \"Number of Hikes\") +\n  theme_minimal()",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html",
    "href": "bw/bw-bi.html",
    "title": "\n2  Bivariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking bivariate visualization. The visualization will not perfect the first time but you are expected to improve it throughout the semester especially after covering advanced topics such as effective viz.\n\n#|fig-cap: \"Republican Voting Percentage in Counties in 2020, and their Previous Years' Political Trend\"\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density(alpha = 0.5) +\n  labs(x = \"Republican Vote Percentage in 2020\", y = \"Density\") +\n  scale_fill_viridis_d(name = \"Historical Political Trend\") +\n  theme_minimal()",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html",
    "href": "bw/bw-tri.html",
    "title": "\n3  Trivariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking trivariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\n#|fig-cap: \"Avergae SAT Scores of Each State vs. The Expense per Student, Categorized by Percentage of Students Taking the SAT\"\nggplot(education, aes(x= sat, y = expend, col = fracCat)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = \"lm\") +\n  scale_color_viridis_d(name = \"% of SAT Students\", labels = c(\"0-15%\",\"15-45%\",\"45-100%\")) +\n  labs(x = \"Average SAT Score\", y = \"Expense per Student\") +\n  theme_bw() \n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-quad.html",
    "href": "bw/bw-quad.html",
    "title": "\n4  Quadvariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking quadvariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\nggplot(weather, aes(x = date)) + \n  geom_point(aes(y = temp9am), col = \"orange\", size = .3) +\n  geom_point(aes(y = humidity9am), size = .5) +\n  facet_wrap(~ location) +\n  theme_bw() +\n  labs(x = \"Date at Measurement\", y = \"Humidity (%)/Temperature(C) at 9am\")\n\n\n\nHumidity and Temperature Measurements at 9am, 2020-2022, in Hobart, Ulruru, and Wollongong",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quadvariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html",
    "href": "bw/bw-spatial.html",
    "title": "\n5  Spatial Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking spatial visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +\n  geom_map(map = county_map) +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n  expand_limits(x = county_map$long, y = county_map$lat)  +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() +\n  labs(title = \"Percentage of Republican Voters in 10% Increments by County\")",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/exam-one.html",
    "href": "bw/exam-one.html",
    "title": "\n6  exam-one\n",
    "section": "",
    "text": "#1,2,3,4\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidytuesdayR)\nfc &lt;- tt_load('2020-02-18')\n\n---- Compiling #TidyTuesday Information for 2020-02-18 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"food_consumption.csv\"\n\nfc &lt;- fc$food_consumption\n\n#1.2 Grand Research Question ## What does the consumption of each food category in each country look like?\n#5 Understanding\n\ndim(fc)\n\n[1] 1430    4\n\nhead(fc)\n\n# A tibble: 6 × 4\n  country   food_category consumption co2_emmission\n  &lt;chr&gt;     &lt;chr&gt;               &lt;dbl&gt;         &lt;dbl&gt;\n1 Argentina Pork                10.5          37.2 \n2 Argentina Poultry             38.7          41.5 \n3 Argentina Beef                55.5        1712   \n4 Argentina Lamb & Goat          1.56         54.6 \n5 Argentina Fish                 4.36          6.96\n6 Argentina Eggs                11.4          10.5 \n\ntail(fc)\n\n# A tibble: 6 × 4\n  country    food_category            consumption co2_emmission\n  &lt;chr&gt;      &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;\n1 Bangladesh Eggs                            2.08          1.91\n2 Bangladesh Milk - inc. cheese             21.9          31.2 \n3 Bangladesh Wheat and Wheat Products       17.5           3.33\n4 Bangladesh Rice                          172.          220.  \n5 Bangladesh Soybeans                        0.61          0.27\n6 Bangladesh Nuts inc. Peanut Butter         0.72          1.27\n\nstr(fc)\n\nspc_tbl_ [1,430 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ country      : chr [1:1430] \"Argentina\" \"Argentina\" \"Argentina\" \"Argentina\" ...\n $ food_category: chr [1:1430] \"Pork\" \"Poultry\" \"Beef\" \"Lamb & Goat\" ...\n $ consumption  : num [1:1430] 10.51 38.66 55.48 1.56 4.36 ...\n $ co2_emmission: num [1:1430] 37.2 41.53 1712 54.63 6.96 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   country = col_character(),\n  ..   food_category = col_character(),\n  ..   consumption = col_double(),\n  ..   co2_emmission = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n#6 Exploring\n\nhead(fc,22)\n\n# A tibble: 22 × 4\n   country   food_category            consumption co2_emmission\n   &lt;chr&gt;     &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;\n 1 Argentina Pork                           10.5          37.2 \n 2 Argentina Poultry                        38.7          41.5 \n 3 Argentina Beef                           55.5        1712   \n 4 Argentina Lamb & Goat                     1.56         54.6 \n 5 Argentina Fish                            4.36          6.96\n 6 Argentina Eggs                           11.4          10.5 \n 7 Argentina Milk - inc. cheese            195.          278.  \n 8 Argentina Wheat and Wheat Products      103.           19.7 \n 9 Argentina Rice                            8.77         11.2 \n10 Argentina Soybeans                        0             0   \n# ℹ 12 more rows\n\ntail(fc,22)\n\n# A tibble: 22 × 4\n   country food_category            consumption co2_emmission\n   &lt;chr&gt;   &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;\n 1 Liberia Pork                            4.01         14.2 \n 2 Liberia Poultry                         8.91          9.57\n 3 Liberia Beef                            0.78         24.1 \n 4 Liberia Lamb & Goat                     0.48         16.8 \n 5 Liberia Fish                            4.13          6.59\n 6 Liberia Eggs                            2.05          1.88\n 7 Liberia Milk - inc. cheese              3.04          4.33\n 8 Liberia Wheat and Wheat Products       11.0           2.09\n 9 Liberia Rice                           94.8         121.  \n10 Liberia Soybeans                        0.63          0.28\n# ℹ 12 more rows\n\n\n::: Units: country, food category, consumption and CO2 emmission. 11 food categories and 130 countries. The univariate viz for food categories and countries is bar graph, and for consumption is density graph or histogram.\n#7 Individual Variables\n::: The grand research question involves 3 variables, country, food category and consumption\n#8 Consumption\n\nfc |&gt; \n  ggplot(aes(x = food_category, y= consumption)) +\n  geom_boxplot() +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))\n\n\n\n\n\n\n\n\nfc |&gt;\n  filter(country %in% c(\"Argentina\", \"Australia\", \"Liberia\", \"Bangladesh\")) |&gt;\n  ggplot(aes(x = country, y = consumption)) +\n  geom_violin()\n\n\n\n\n\n\n\n#9 Answering GRQ\n\n#reduced number of countries for clarity sake, one of the many challenges with this dataset\nfc |&gt;\n  mutate(a_country = str_detect(country, \"A\")) |&gt;\n  filter(a_country == TRUE) |&gt;\n  ggplot(aes(x = food_category, y = consumption, col = country)) +\n  geom_point()  +\n  scale_x_discrete(guide = guide_axis(n.dodge = 3))\n\n\n\n\n\n\n\n#10 Beyond Viz ##10.1 Effectiveness\n::: Concepts that should be applied to final viz for effectiveness: labels (labs()), alt text (fig-cap, fig-alt), colorblind-friendly colors (scale_fill_viridis_d()), graph theme (theme_classic/bw/minimal/etc.()), legend (theme())\n##10.2 Additional Questions\n::: Follow-ups: How do CO2 emmissions differ between food groups? Is there a correlation between a country’s consumption and their emissions, and how does it vary between countries?",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>exam-one</span>"
    ]
  },
  {
    "objectID": "bw/exam-two.html",
    "href": "bw/exam-two.html",
    "title": "\n7  exam-two\n",
    "section": "",
    "text": "#2 #2.2,2.3\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidytuesdayR)\nlibrary(rnaturalearth)\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(ggplot2)\nfc &lt;- tt_load('2020-02-18')\n\n---- Compiling #TidyTuesday Information for 2020-02-18 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"food_consumption.csv\"\n\nfc &lt;- fc$food_consumption\n\n#2.4 Inspection\n\nstr(fc)\n\nspc_tbl_ [1,430 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ country      : chr [1:1430] \"Argentina\" \"Argentina\" \"Argentina\" \"Argentina\" ...\n $ food_category: chr [1:1430] \"Pork\" \"Poultry\" \"Beef\" \"Lamb & Goat\" ...\n $ consumption  : num [1:1430] 10.51 38.66 55.48 1.56 4.36 ...\n $ co2_emmission: num [1:1430] 37.2 41.53 1712 54.63 6.96 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   country = col_character(),\n  ..   food_category = col_character(),\n  ..   consumption = col_double(),\n  ..   co2_emmission = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nhead(fc,22)\n\n# A tibble: 22 × 4\n   country   food_category            consumption co2_emmission\n   &lt;chr&gt;     &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;\n 1 Argentina Pork                           10.5          37.2 \n 2 Argentina Poultry                        38.7          41.5 \n 3 Argentina Beef                           55.5        1712   \n 4 Argentina Lamb & Goat                     1.56         54.6 \n 5 Argentina Fish                            4.36          6.96\n 6 Argentina Eggs                           11.4          10.5 \n 7 Argentina Milk - inc. cheese            195.          278.  \n 8 Argentina Wheat and Wheat Products      103.           19.7 \n 9 Argentina Rice                            8.77         11.2 \n10 Argentina Soybeans                        0             0   \n# ℹ 12 more rows\n\n\n##2.6 Inspect Food\n\nfc|&gt;\n  distinct(food_category) |&gt;\n  mutate(row_number())\n\n# A tibble: 11 × 2\n   food_category            `row_number()`\n   &lt;chr&gt;                             &lt;int&gt;\n 1 Pork                                  1\n 2 Poultry                               2\n 3 Beef                                  3\n 4 Lamb & Goat                           4\n 5 Fish                                  5\n 6 Eggs                                  6\n 7 Milk - inc. cheese                    7\n 8 Wheat and Wheat Products              8\n 9 Rice                                  9\n10 Soybeans                             10\n11 Nuts inc. Peanut Butter              11\n\n\n::: The problem with the food cateogry values is that they are not in snake case, have special characters and spaces, which makes the set hard to work with.\n##2.7 Fix Food\n\nfcc &lt;- fc|&gt;\n  mutate(food_category = fct_recode(food_category, \n                                     \"Lamb\" = \"Lamb & Goat\", \n                                     \"Dairy\" = \"Milk - inc. cheese\", \n                                     \"Wheat\" = \"Wheat and Wheat Products\",\n                                     \"Nuts\" = \"Nuts inc. Peanut Butter\"))\n\n##2.8 Reinspect\n\nfcc |&gt;\n  distinct(food_category) |&gt;\n  mutate(row_number())\n\n# A tibble: 11 × 2\n   food_category `row_number()`\n   &lt;fct&gt;                  &lt;int&gt;\n 1 Pork                       1\n 2 Poultry                    2\n 3 Beef                       3\n 4 Lamb                       4\n 5 Fish                       5\n 6 Eggs                       6\n 7 Dairy                      7\n 8 Wheat                      8\n 9 Rice                       9\n10 Soybeans                  10\n11 Nuts                      11\n\n\n#Most Consuming Countries ## Research Question: Which 5 countries consume the most food?\n#3.1 Shape\n\nfc |&gt;\n  select(consumption, country) |&gt;\n  group_by(country) |&gt;\n  summarise(consumption_sum = sum(consumption)) |&gt;\n  arrange(desc(consumption_sum)) |&gt;\n  head(5) |&gt;\n  ggplot(aes(x = country, y = consumption_sum)) +\n  geom_col()\n\n\n\n\n\n\n\n##3.3 Viz\n::: Most appropriate is geom_col, boxplot and violin only if you are including all consumption data points, not the sum total\n#4 Most Consuming of Each Food #RQ2: Which top 5 countries consume each food?\n\nfc |&gt;\n  group_by(food_category) |&gt;\n  summarise(consum = sum(consumption), country) |&gt;\n  slice_max(order_by = consum, n = 5, with_ties = FALSE) |&gt;\n  select(food_category, country, consum) %&gt;%\n  arrange(food_category, desc(consum))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'food_category'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 55 × 3\n# Groups:   food_category [11]\n   food_category country     consum\n   &lt;chr&gt;         &lt;chr&gt;        &lt;dbl&gt;\n 1 Beef          Argentina    1576.\n 2 Beef          Australia    1576.\n 3 Beef          Albania      1576.\n 4 Beef          Iceland      1576.\n 5 Beef          New Zealand  1576.\n 6 Eggs          Argentina    1061.\n 7 Eggs          Australia    1061.\n 8 Eggs          Albania      1061.\n 9 Eggs          Iceland      1061.\n10 Eggs          New Zealand  1061.\n# ℹ 45 more rows\n\n\n##4.3 Viz\n::: Appropriate graphs: geom_col with faceting, coloring, or positioning (dodged,stack or fill)\n#5 Food Consumption #RQ3: What does the consumption of each food look like?\n##5.1 Shape\n\nne_countries(returnclass = \"sf\") |&gt;\n  #gathers features of countries\n  select(name, geometry) |&gt;\n  #selecting only names of countries and geoms\n  left_join(fcc |&gt; select(-co2_emmission), \n            #joining the tt dataset to the sf dataset\n            join_by(name == country)) |&gt;\n            #key\n  ggplot() +\n  #plot\n  geom_sf(aes(fill = consumption)) +\n  #country shapes, consumption values filled in\n  facet_wrap(~food_category) +\n  #each category gets it's own graph\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n  #puts legend at the bottom\n\n##5.5 Viz Attempt 2\n\nne_countries(returnclass = \"sf\") |&gt;\n  select(name, geometry) |&gt;\n  mutate(name = ifelse(name == \"United States of America\", \"USA\", name)) |&gt;\n  mutate(name = ifelse(name == \"Bosnia and Herz\", \"Bosnia and Herzegovina\", name)) |&gt;\n  mutate(name = ifelse(name == \"Czechia\", \"Czech Republic\", name)) |&gt;\n  mutate(name = ifelse(name == \"Taiwan\", \"Taiwan. ROC\", name)) |&gt;\n  left_join(fcc |&gt; select(-co2_emmission),\n              join_by(name == country)) |&gt;\n        pivot_wider(names_from = food_category,\n                          values_from = consumption) |&gt;\n  select(-\"NA\") |&gt;\n  pivot_longer(cols = c(-name, -geometry),\n               names_to = \"food_category\",\n               values_to = \"consumption\") |&gt;\nggplot() +\n  geom_sf(aes(fill = consumption)) +\n  facet_wrap(~food_category) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n::: 1-4 mutates the name column so that the values (certain country names) in the sf dataset match those of the fc dataset. 5 makes the food category values into columns, with their values coming from the values in their row under the consumption column. 6,7 not sure what these do.\n#5.6 Food Consumption Stats\n\nfcc |&gt;\n  group_by(food_category) |&gt;\n  summarise(min = min(consumption), max = max(consumption), range = round(max-min)) |&gt;\n  arrange(desc(range))\n\n# A tibble: 11 × 4\n   food_category   min   max range\n   &lt;fct&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Dairy          3.04 431.    428\n 2 Wheat          2.74 198.    195\n 3 Fish           0.24 180.    179\n 4 Rice           0.95 172.    171\n 5 Pork           0     67.1    67\n 6 Poultry        0.47  62.5    62\n 7 Beef           0.78  55.5    55\n 8 Nuts           0.18  23.0    23\n 9 Lamb           0     21.1    21\n10 Eggs           0.16  19.2    19\n11 Soybeans       0     17.0    17\n\n\n##5.7 Viz 3\n\nne_countries(returnclass = \"sf\") |&gt;\n  select(name, geometry) |&gt;\n  mutate(name = ifelse(name == \"United States of America\", \"USA\", name)) |&gt;\n  mutate(name = ifelse(name == \"Bosnia and Herz\", \"Bosnia and Herzegovina\", name)) |&gt;\n  mutate(name = ifelse(name == \"Czechia\", \"Czech Republic\", name)) |&gt;\n  mutate(name = ifelse(name == \"Taiwan\", \"Taiwan. ROC\", name)) |&gt;\n  left_join(\n    fcc |&gt; \n      select(-co2_emmission) |&gt;\n      group_by(food_category) |&gt;\n      mutate(consumption = (consumption - mean(consumption))/sd(consumption)),\n              join_by(name == country)) |&gt;\n        pivot_wider(names_from = food_category,\n                          values_from = consumption) |&gt;\n  select(-\"NA\") |&gt;\n  pivot_longer(cols = c(-name, -geometry),\n               names_to = \"food_category\",\n               values_to = \"consumption\") |&gt;\nggplot() +\n  geom_sf(aes(fill = consumption)) +\n  facet_wrap(~food_category) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n::: The viz can be more effective by making consumptiona a discrete variable, so we can see the difference between countries’ consumptions better",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>exam-two</span>"
    ]
  },
  {
    "objectID": "ss/e1.html",
    "href": "ss/e1.html",
    "title": "8  e1",
    "section": "",
    "text": "Univariate Visualization (Viz) Benefits of Visualization: Understand what we’re working with scales & typical outcomes, outliers, patterns & relationships. Refine research questions, inform next steps of analysis. Communicate findings, tell a story. Components of graphics include: a frame, or coordinate system. axes and gridlines. a layer, geometric elements (e.g. lines, points) that represent data points or patterns of data points. Each type of geometric element is a separate layer, sometimes called “geoms” or “glyphs” scales, added to geometric elements (e.g. color, size, shape), additional information about data scales or groups. faceting, splitting up of the data into multiple subplots, or facets, to examine different groups within the data a theme, plot aesthetics, (e.g. font type, background, color scheme). Bivariate Viz Bivariate Viz For looking at 2 variables and the relationship between them Variable Roles Response: variability we would like to explain (time to complete a hike) Predictor: explains some of the variability in the response (a hike’s elevation or length) Bivariate visualization explore: relationship trends (direction and form) relationship strength (degree of variability from the trend) outliers in the relationship How to plot bivariate Quantitative variable requires a new axis (or a quantitative scale if out of axes). Categorical variable requires a new way to “group” the graphic (colors, shapes, separate facets, etc) For visualizations in which overlap in glyphs or plots obscures the patterns, faceting or transparency.\nMultivariate Viz Fill can be used to add a third variable Bar graph is good for comparing variables side by side Proportional bar/filled bar allows for comparison of the proportions of a variable SUBTLETIES: Defining fill or color by a variable\nHow we define the fill or color depends upon whether we’re defining it by a named color or by some variable in our dataset. For example: geom_(fill = “blue”) named colors are defined outside the aesthetics and put in quotes geom_(aes(fill = variable)) or ggplot(___, aes(fill = variable)) colors/fills defined by a variable are defined inside the aesthetics\nAlong with all the components of graphics we’ve used, we now need scales Scales: changes color, fill, size, shape, etc. according to levels of new (third) variable\nSpatial Viz Plot data points on top of a map using ggplot(). Create choropleth maps using geom_map(). Understand basics of mapping using leaflet, adding points and choropleths to a base map. For spatial viz: Data set needs: Point maps need location coordinates for points of interest Choropleth maps need variable outcomes for regions of interest Background map needs: Latitude and longitude coordinates to specify boundaries for regions of interest (eg: countries, states) County-level, state-level, country-level, continent-level info live in multiple places. Wrangled data to match background map Leaflet: Open-source JavaScript library for creating maps. uses different plotting framework than ggplot2, but still has tidyverse feel Steps: Create map widget by calling leaflet() and telling it the data Add base map using addTiles() or addProviderTiles(). Add layers to map using layer functions like addMarkers or addPolygons()). Print map widget to display it\nEffective Viz Ineffective: Wrong - “objectively incorrect” viz, numbers/trends displayed wrong Bad - “unclear, confusing, overly complicated, deceiving” Ugly - correct & clear, but problematic aesthetics The basics Professionalism meaningful axis labels figure caption Accessibility have “alt text” - written description of the viz that can be read out by a screen reader (video) color palette distinguishable across common forms of color blindness Design Details think about comparison. make it easy for people to perceive things that are similar and that are different. Ethics should not mislead, i.e. “wrong” viz are unethical Correll’s 3 principles Visibility: hidden labor, uncertainty, impacts. Credit sources, data Privacy: Collect data with empathy. Encourage small Data, anthropomorphize data, obfuscate data to protect privacy. Power: Challenge structures of power. Support data due process, act as data advocates, pressure unethical analytical behavior. D’Ignazio & Klein data feminism Emotion & Embodiment: Value multiple forms of knowledge, including the knowledge that comes from people as living, feeling bodies in the world. Pluralism: the most complete knowledge comes from synthesizing multiple perspectives Context: Data are not neutral or objective",
    "crumbs": [
      "Summary Sheets",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>e1</span>"
    ]
  },
  {
    "objectID": "ss/e2.html",
    "href": "ss/e2.html",
    "title": "9  e2",
    "section": "",
    "text": "Factors Regular expressions Characters: detect, replace, extract certain patterns Characters to factors: relabel or reorder a character variable\nfct_relevel() to store character as factor, making values actual levels fct_reorder() to reorder levels\nStrings To detect, replace or extract certain patterns in character strings str_replace(x, pattern, replacement) finds the first part of x that matches the pattern and replaces it with replacement str_replace_all(x, pattern, replacement) finds all instances in x that matches the pattern and replaces it with replacement str_to_lower(x) converts all upper case letters in x to lower case str_sub(x, start, end) only keeps a subset of characters in x, from start (a number indexing the first letter to keep) to end (a number indexing the last letter to keep) str_length(x) records the number of characters in x str_detect(x, pattern) is TRUE if x contains the given pattern and FALSE otherwise\nseparate() to split a column into 2 new columns\nData Import Data projects starts with: 1. Data collection: finding, saving, importing 2. Analysis: EDA - getting to know and refine our data\n.csv: comma separated values\nread_csv(): save excel and google sheets files as csv read_delim(): delimited formats (tab,space,etc.) read_sheet(): google sheet st_read(): spatial data shape file\nAbsolute: specific location Relative: relative to where the file is read",
    "crumbs": [
      "Summary Sheets",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>e2</span>"
    ]
  }
]